name: Deploy to Cloudformation

on:
  workflow_run:
    workflows:
      - Build and test
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success'}}
    runs-on: ubuntu-20.04
    env:
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGHOST: ${{ secrets.DB_HOST }}
      PEEP_TEST_DB_NAME: ${{ secrets.DB_NAME }}
      PEEP_USER: ${{ secrets.DB_USER }}
      PEEP_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: initial checks
        run: |
          echo ${{ github.event.workflow_run.conclusion }}
          echo ${{ github.event.pull_request.merged }}
          echo ${{ github.event_name == 'push' }}
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS CDK CLI
        run: |
          npm install -g aws-cdk@2.137.0

      - name: Install AWS CDK Python packages
        run: |
          cd cdk/ && pip install -r requirements.txt

      - name: Update pip
        run: |
          python -m pip install --upgrade pip

      - name: Make deployment package
        run: |
          make build

      - name: Deploy SubnetStack
        run: |
          # TODO: The way we get the PEEP_ENV value might be dynamic in the future if we have multiple environments
          cd cdk/ && PEEP_ENV=live cdk deploy SubnetStack --ci

      - name: Deploy RdsInstanceStack
        run: |
          cd cdk/ && PEEP_ENV=live cdk deploy RdsInstanceStack --ci

      - name: Deploy PeepStack
        run: |
          cd cdk/ && PEEP_ENV=live cdk deploy PeepStack --ci

#      - name: Get current instance state
#        id: get_instance_state
#        run: |
#          echo instance_state=$(aws ec2 describe-instance-status \
#            --instance-ids ${{ secrets.AWS_EC2_INSTANCE_ID }} \
#            --region ${{ secrets.AWS_REGION }} \
#            --query 'InstanceStatuses[0].InstanceState.Name' \
#            --output text) >> $GITHUB_OUTPUT
#
#      # Reboot the instance so the deployment script runs after system init
#      - name: Start or reboot EC2 Instance
#        run: |
#          set -eu
#          echo "Instance status: ${{ steps.get_instance_state.outputs.instance_state }}"
#
#          if [ "${{ steps.get_instance_state.outputs.instance_state }}" == "None" ] || [ "${{ steps.get_instance_state.outputs.instance_state }}" == "stopped" ] ; then
#            echo "Instance is stopped. Starting it now..."
#            aws ec2 start-instances --instance-ids ${{ secrets.AWS_EC2_INSTANCE_ID }}
#          elif [ "${{ steps.get_instance_state.outputs.instance_state }}" == "running" ]; then
#            echo "Instance is running. Rebooting it now..."
#            aws ec2 reboot-instances --instance-ids ${{ secrets.AWS_EC2_INSTANCE_ID }}
#          else
#            echo "Instance is in state: ${{ steps.get_instance_state.outputs.instance_state }}. No action taken."
#            exit 1
#          fi
